<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="de/dda/md__home_boki__tmp_kivi_test_README" kind="page">
    <compoundname>md__home_boki__tmp_kivi_test_README</compoundname>
    <title>Test</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This directory contains all the unit tests for the KIVI programming language. The Catch2 framework is used.</para>
<para><hruler/>
</para>
<para><bold>Contents</bold></para>
<para><itemizedlist>
<listitem><para><computeroutput>backend</computeroutput> Hence the name, the backend/ directory contains the source code related to the implementation of the backend of KIVI compiler.</para>
</listitem><listitem><para><computeroutput>frontend</computeroutput> - The frontend/ directory contains the source code related to the implementation of the frontend of KIVI compiler.</para>
</listitem><listitem><para><computeroutput><ref refid="dd/d36/config_8test_8cc" kindref="compound">config.test.cc</ref></computeroutput> - The file configures the Catch2 testing framework. Checkout the <ulink url="https://github.com/catchorg/Catch2/blob/devel/docs/slow-compiles.md">slow-compiles.md</ulink> section of the Catch2 documentation for more details.</para>
</listitem><listitem><para><computeroutput><ref refid="da/d7a/example_8test_8cc" kindref="compound">example.test.cc</ref></computeroutput> - This file tests all the examples provided by the KIVI compiler.</para>
</listitem></itemizedlist>
</para>
<para><bold>How to build my own tests?</bold></para>
<para>You can always checkout the <ulink url="https://github.com/catchorg/Catch2/blob/devel/docs/Readme.md#top">Catch2 documentation</ulink> for additional information and different examples. However, here we have picked up one that we assume as useful.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;exception&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;catch2/catch2.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>fib_bad_arg_exception<sp/>:<sp/>std::exception</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>m_bad_arg;</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>fib_bad_arg_exception(int<sp/>bad_arg)<sp/>:<sp/>m_bad_arg(bad_arg)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">constexpr<sp/>static<sp/>int<sp/>fib(int<sp/>n)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>fib_bad_arg_exception(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(n<sp/>&gt;=<sp/>100)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>fib_bad_arg_exception(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(n)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>0:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>fib(n<sp/>-<sp/>1)<sp/>+<sp/>fib(n<sp/>-<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_CASE(&quot;Fibonacci<sp/>calculator&quot;,<sp/>&quot;[fib]&quot;)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SECTION(&quot;legal<sp/>positive<sp/>number&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(fib(5)<sp/>==<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SECTION(&quot;illegal<sp/>positive<sp/>number&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_THROWS(fib(101));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SECTION(&quot;negative<sp/>number&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_THROWS(fib(-3));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SECTION(&quot;zero&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(fib(0)<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SECTION(&quot;one&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(fib(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/home/boki/.tmp/kivi/test/README.md"/>
  </compounddef>
</doxygen>
