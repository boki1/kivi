<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d5/df9/transform__iterator_8hh" kind="file" language="C++">
    <compoundname>transform_iterator.hh</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">iterator</includes>
    <includedby refid="db/de1/concrete__generators_8cc" local="no">/home/boki/KIVI/frontend/ir_generation/concrete_generators.cc</includedby>
    <incdepgraph>
      <node id="3">
        <label>iterator</label>
      </node>
      <node id="1">
        <label>/home/boki/KIVI/extern/transform_iterator/transform_iterator.hh</label>
        <link refid="d5/df9/transform__iterator_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/boki/KIVI/extern/transform_iterator/transform_iterator.hh</label>
        <link refid="d5/df9/transform__iterator_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/boki/KIVI/frontend/ir_generation/concrete_generators.cc</label>
        <link refid="db/de1/concrete__generators_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="df/d1b/structtransform__iterator__base" prot="public">transform_iterator_base</innerclass>
    <innerclass refid="d9/d26/structtransform__iterator" prot="public">transform_iterator</innerclass>
    <innerclass refid="d3/df2/structtransform__iterator__spec" prot="public">transform_iterator_spec</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/df9/transform__iterator_8hh_1a40014b6385e3a509135f9f1165bdc71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_transform_iterator</definition>
        <argsstring>(const I &amp;begin, const I &amp;end, F &amp;&amp;func) -&gt; transform_iterator&lt; decltype(func(*begin))&gt;</argsstring>
        <name>make_transform_iterator</name>
        <param>
          <type>const I &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/KIVI/extern/transform_iterator/transform_iterator.hh" line="102" column="6" bodyfile="/home/boki/KIVI/extern/transform_iterator/transform_iterator.hh" bodystart="102" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tiny<sp/>transform_iterator<sp/>for<sp/>C++.<sp/>Copyright<sp/>2017<sp/>Â©<sp/>Joel<sp/>Yliluoma<sp/>-<sp/>http://iki.fi/bisqwit/</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>License:<sp/>MIT</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Example<sp/>WITHOUT<sp/>transform_iterator:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Func&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>make_transformed_vector(const<sp/>std::vector&lt;int&gt;&amp;<sp/>model,<sp/>Func&amp;&amp;<sp/>func)</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>result;<sp/>//<sp/>Create<sp/>named<sp/>temporary</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(model.begin(),<sp/>model.end(),<sp/>std::back_inserter(result),<sp/>std::forward&lt;Func&gt;(func));</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>main()</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>test{6,10,5};</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>test2<sp/>=<sp/>make_transformed_vector(test,<sp/>[&amp;](int<sp/>v)<sp/>{<sp/>return<sp/>v*2;<sp/>});</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto<sp/>d:<sp/>test2)<sp/>std::printf(&quot;%d\n&quot;,<sp/>d);</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>Example<sp/>use,<sp/>WITH<sp/>transform_iterator:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;transform_iterator.hh&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Func&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>make_transformed_vector(const<sp/>std::vector&lt;int&gt;&amp;<sp/>model,<sp/>Func&amp;&amp;<sp/>func)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Look<sp/>ma,<sp/>no<sp/>named<sp/>temporaries!</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::vector&lt;int&gt;<sp/>(<sp/>make_transform_iterator(model.begin(),<sp/>model.end(),<sp/>std::forward&lt;Func&gt;(func)),</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform_iterator&lt;int&gt;()<sp/>);<sp/>//<sp/>int<sp/>is<sp/>the<sp/>return<sp/>type<sp/>of<sp/>the<sp/>functor.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>main()</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>test{6,10,5};</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>test2<sp/>=<sp/>make_transformed_vector(test,<sp/>[&amp;](int<sp/>v)<sp/>{<sp/>return<sp/>v*2;<sp/>});</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto<sp/>d:<sp/>test2)<sp/>std::printf(&quot;%d\n&quot;,<sp/>d);</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="45" refid="df/d1b/structtransform__iterator__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base</ref></highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47" refid="df/d1b/structtransform__iterator__base_1abe2af9e4f9c30a0645e8a698d0993263" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base_1abe2af9e4f9c30a0645e8a698d0993263" kindref="member">~transform_iterator_base</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49" refid="df/d1b/structtransform__iterator__base_1a122d2d377dec79f4102095401a6e9716" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d1b/structtransform__iterator__base_1acf3c8be70955fc902ed730e66f00355e" kindref="member">transform_iterator_base</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator</ref>&lt;R&gt;;</highlight></codeline>
<codeline lineno="52" refid="df/d1b/structtransform__iterator__base_1acbe38494994f546a1f3000dbd32c1d3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base_1acbe38494994f546a1f3000dbd32c1d3d" kindref="member">is_end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53" refid="df/d1b/structtransform__iterator__base_1a743d9108b4d53521f232ddeb3c42d9c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base_1a743d9108b4d53521f232ddeb3c42d9c2" kindref="member">eq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base&lt;R&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54" refid="df/d1b/structtransform__iterator__base_1adb0f3663e765919b6d4df681a1b51b5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base_1adb0f3663e765919b6d4df681a1b51b5f" kindref="member">delta</ref>(std::ptrdiff_t)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55" refid="df/d1b/structtransform__iterator__base_1abd44ce20a709d61664f08409dee8f696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>R<sp/><ref refid="df/d1b/structtransform__iterator__base_1abd44ce20a709d61664f08409dee8f696" kindref="member">ref</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56" refid="df/d1b/structtransform__iterator__base_1a1568439d6a414a371a9a37242f81b5ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base&lt;R&gt;</ref>*<sp/><ref refid="df/d1b/structtransform__iterator__base_1a1568439d6a414a371a9a37242f81b5ec" kindref="member">clone</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="60" refid="d9/d26/structtransform__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::iterator&lt;std::input_iterator_tag,<sp/>std::decay_t&lt;R&gt;&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62" refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;transform_iterator_base&lt;R&gt;&gt;<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="d9/d26/structtransform__iterator_1a7a466c61c18c0f0e41f2088caad9f778" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator_1a7a466c61c18c0f0e41f2088caad9f778" kindref="member">transform_iterator</ref>()<sp/>:<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>{}<sp/>{}</highlight></codeline>
<codeline lineno="65" refid="d9/d26/structtransform__iterator_1adadbfae0545a6b45e0cdb07250068fe0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator_1adadbfae0545a6b45e0cdb07250068fe0" kindref="member">transform_iterator</ref>(<ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base&lt;R&gt;</ref>*<sp/>p)<sp/>:<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>(p)<sp/>{}</highlight></codeline>
<codeline lineno="66" refid="d9/d26/structtransform__iterator_1aa63f0625591929e0ed829cf7f0369ea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator_1aa63f0625591929e0ed829cf7f0369ea8" kindref="member">transform_iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator</ref>&amp;<sp/>b)<sp/><sp/><sp/>:<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>(b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref><sp/>?<sp/>b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;clone()<sp/>:<sp/>nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="d9/d26/structtransform__iterator_1a2adfa9d5dcfc3d96c79e022fb4ee541b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator_1a2adfa9d5dcfc3d96c79e022fb4ee541b" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="d9/d26/structtransform__iterator_1aa0486b5f141caa5dd43d79198ff43527" kindref="member">operator==</ref>(b);<sp/>}</highlight></codeline>
<codeline lineno="69" refid="d9/d26/structtransform__iterator_1aa0486b5f141caa5dd43d79198ff43527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator_1aa0486b5f141caa5dd43d79198ff43527" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="70"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref><sp/>?<sp/>(b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref><sp/>?<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;eq(*b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>)<sp/>:<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;is_end())</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref><sp/>?<sp/>b.<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;is_end()<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74" refid="d9/d26/structtransform__iterator_1a2e6d477f4163e28269839af7ecbb365b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/><ref refid="d9/d26/structtransform__iterator_1a2e6d477f4163e28269839af7ecbb365b" kindref="member">operator* </ref>()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;ref();<sp/>}</highlight></codeline>
<codeline lineno="75" refid="d9/d26/structtransform__iterator_1a7232300913e12bb634f476565015b9b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/><ref refid="d9/d26/structtransform__iterator_1a7232300913e12bb634f476565015b9b0" kindref="member">operator++</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>)<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;delta(1);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="76" refid="d9/d26/structtransform__iterator_1aff76da276c0e20783de4e86d9028c056" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/><ref refid="d9/d26/structtransform__iterator_1aff76da276c0e20783de4e86d9028c056" kindref="member">operator--</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>)<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;delta(-1);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="77" refid="d9/d26/structtransform__iterator_1aa342193fa567621af304bdb7d6b71009" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/><ref refid="d9/d26/structtransform__iterator_1aa342193fa567621af304bdb7d6b71009" kindref="member">operator+=</ref>(std::ptrdiff_t<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>)<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;delta(p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="78" refid="d9/d26/structtransform__iterator_1ab3020eeaba71e41b92f16ff17a3efbe2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref>&amp;<sp/><ref refid="d9/d26/structtransform__iterator_1ab3020eeaba71e41b92f16ff17a3efbe2" kindref="member">operator-=</ref>(std::ptrdiff_t<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>)<sp/><ref refid="d9/d26/structtransform__iterator_1a472a4c9f6299c211f3c16ac9ff47e38c" kindref="member">ptr</ref>-&gt;delta(-p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="79" refid="d9/d26/structtransform__iterator_1a9b0e365a466e4a99255ea0090119d751" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/><ref refid="d9/d26/structtransform__iterator_1a9b0e365a466e4a99255ea0090119d751" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>++*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/>}</highlight></codeline>
<codeline lineno="80" refid="d9/d26/structtransform__iterator_1a8b2308403e83650bb5464fd64acb8192" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/><ref refid="d9/d26/structtransform__iterator_1a8b2308403e83650bb5464fd64acb8192" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>--*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/>}</highlight></codeline>
<codeline lineno="81" refid="d9/d26/structtransform__iterator_1ab6b31d0c5312fb736aa0dce12bad125e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/><ref refid="d9/d26/structtransform__iterator_1ab6b31d0c5312fb736aa0dce12bad125e" kindref="member">operator+</ref>(std::ptrdiff_t<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>result+=p;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/>}</highlight></codeline>
<codeline lineno="82" refid="d9/d26/structtransform__iterator_1a8b83c240cf2fae0850adcceeb34367f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/><ref refid="d9/d26/structtransform__iterator_1a8b83c240cf2fae0850adcceeb34367f7" kindref="member">operator-</ref>(std::ptrdiff_t<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator&lt;R&gt;</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>result-=p;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>decltype((*((const<sp/>F*)</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">))(*I()))&gt;</highlight></codeline>
<codeline lineno="86" refid="d3/df2/structtransform__iterator__spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/df2/structtransform__iterator__spec" kindref="compound">transform_iterator_spec</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base</ref>&lt;R&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88" refid="d3/df2/structtransform__iterator__spec_1a5e8defbdea93760f4bbb30bdae7fa2d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a5e8defbdea93760f4bbb30bdae7fa2d2" kindref="member">transform_iterator_spec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>e,<sp/>F&amp;&amp;<sp/>f)<sp/>:<sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base</ref>&lt;R&gt;(),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref>(b),<sp/><ref refid="d3/df2/structtransform__iterator__spec_1ad3d3e97062345a6e7dcb5ed591f94d7e" kindref="member">end</ref>(e),<sp/><ref refid="d3/df2/structtransform__iterator__spec_1a201c29a7461c9217f8f1100fdf9d7048" kindref="member">func</ref>(std::forward&lt;F&gt;(f))<sp/>{}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91" refid="d3/df2/structtransform__iterator__spec_1a607b0570dc2708cc9f64d3b860dce240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a607b0570dc2708cc9f64d3b860dce240" kindref="member">eq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base&lt;R&gt;</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref><sp/>==<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec" kindref="compound">transform_iterator_spec&lt;I,F,R&gt;</ref>&amp;)b).cur;<sp/>}</highlight></codeline>
<codeline lineno="92" refid="d3/df2/structtransform__iterator__spec_1a253d09507f7def0e172c0adbe5a4ed9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a253d09507f7def0e172c0adbe5a4ed9a" kindref="member">is_end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref><sp/>==<sp/><ref refid="d3/df2/structtransform__iterator__spec_1ad3d3e97062345a6e7dcb5ed591f94d7e" kindref="member">end</ref>;<sp/>}</highlight></codeline>
<codeline lineno="93" refid="d3/df2/structtransform__iterator__spec_1ad64f4706117c9f4dad74d293f5f4597f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1ad64f4706117c9f4dad74d293f5f4597f" kindref="member">delta</ref>(std::ptrdiff_t<sp/>by)<sp/>{<sp/>std::advance(<ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref>,<sp/>by);<sp/>}</highlight></codeline>
<codeline lineno="94" refid="d3/df2/structtransform__iterator__spec_1aecbcd4973fc3156748bcd71eb2b912f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>R<sp/><ref refid="d3/df2/structtransform__iterator__spec_1aecbcd4973fc3156748bcd71eb2b912f9" kindref="member">ref</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec_1a201c29a7461c9217f8f1100fdf9d7048" kindref="member">func</ref>(*<ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref>);<sp/>}</highlight></codeline>
<codeline lineno="95" refid="d3/df2/structtransform__iterator__spec_1a98ef388178d491a5c0c20f69eb7ab299" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/d1b/structtransform__iterator__base" kindref="compound">transform_iterator_base&lt;R&gt;</ref>*<sp/><ref refid="d3/df2/structtransform__iterator__spec_1a98ef388178d491a5c0c20f69eb7ab299" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec" kindref="compound">transform_iterator_spec&lt;I,F,R&gt;</ref>(<ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref>,<ref refid="d3/df2/structtransform__iterator__spec_1ad3d3e97062345a6e7dcb5ed591f94d7e" kindref="member">end</ref>,std::forward&lt;F&gt;(<ref refid="d3/df2/structtransform__iterator__spec_1a201c29a7461c9217f8f1100fdf9d7048" kindref="member">func</ref>));<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97" refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/><ref refid="d3/df2/structtransform__iterator__spec_1a96a36b3449a4b83e4cfa5fb4f17f890b" kindref="member">cur</ref>,<sp/><ref refid="d3/df2/structtransform__iterator__spec_1ad3d3e97062345a6e7dcb5ed591f94d7e" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="98" refid="d3/df2/structtransform__iterator__spec_1a201c29a7461c9217f8f1100fdf9d7048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>F&amp;&amp;<sp/><ref refid="d3/df2/structtransform__iterator__spec_1a201c29a7461c9217f8f1100fdf9d7048" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="102" refid="d5/df9/transform__iterator_8hh_1a40014b6385e3a509135f9f1165bdc71d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d5/df9/transform__iterator_8hh_1a40014b6385e3a509135f9f1165bdc71d" kindref="member">make_transform_iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>end,<sp/>F&amp;&amp;<sp/>func)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="d9/d26/structtransform__iterator" kindref="compound">transform_iterator</ref>&lt;decltype(func(*begin))&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>decltype(func(*begin));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/df2/structtransform__iterator__spec" kindref="compound">transform_iterator_spec&lt;I,F,R&gt;</ref>(begin,<sp/>end,<sp/>std::forward&lt;F&gt;(func));</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/boki/KIVI/extern/transform_iterator/transform_iterator.hh"/>
  </compounddef>
</doxygen>
