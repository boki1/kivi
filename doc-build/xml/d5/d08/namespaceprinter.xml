<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d5/d08/namespaceprinter" kind="namespace" language="C++">
    <compoundname>printer</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d5/d08/namespaceprinter_1ae89a93f3763efda9d0e8f91e2b11aacb" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string printer::BoldCyan</definition>
        <argsstring></argsstring>
        <name>BoldCyan</name>
        <initializer>= &quot;\033[1;36m&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The next couple of functions are required by the graph drawing utility </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="17" column="13" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/d08/namespaceprinter_1a1c664f54def989db4fc8bd86c8e533d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::create_vertex</definition>
        <argsstring>(const sa::expression &amp;expr)</argsstring>
        <name>create_vertex</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Creates vertex in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The created vertex </para>
</simplesect>
<simplesect kind="note"><para>Required by the 2D graph drawing utility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="25" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="25" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1a17c580227c8a46664eee12a37412b12c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool printer::is_simple</definition>
        <argsstring>(const sa::expression &amp;e)</argsstring>
        <name>is_simple</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Checks whether the atom is simple or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true / false </para>
</simplesect>
<simplesect kind="note"><para>Required by the 2D graph drawing utility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="93" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1aecc84ece5bc9d6cee20bb51cee9c91a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool printer::should_separate_first</definition>
        <argsstring>(const sa::expression &amp;e)</argsstring>
        <name>should_separate_first</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Whether the first item has to be separated by its children. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true / false </para>
</simplesect>
<simplesect kind="note"><para>Required by the 2D graph drawing utility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="104" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1a365398b10a38ea107b871831aa10aab4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool printer::isnot_oneliner</definition>
        <argsstring>(const sa::expression &amp;e)</argsstring>
        <name>isnot_oneliner</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Whether the full graph of this vertex is a one liner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true / false </para>
</simplesect>
<simplesect kind="note"><para>Required by the 2D graph drawing utility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="115" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1afc078028838eaad1806a375913947760" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto printer::vertex_children</definition>
        <argsstring>(const sa::expression &amp;e)</argsstring>
        <name>vertex_children</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Gets the children of this vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pair with iterator being and end </para>
</simplesect>
<simplesect kind="note"><para>Required by the 2D graph drawing utility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="126" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1acf808b23bcea1a30edb5d99ef24c260d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string printer::print</definition>
        <argsstring>(const std::vector&lt; sa::function &gt; &amp;s) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d16/classsyntax__analyzer_1_1function" kindref="compound">sa::function</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Print all functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The string representation of the graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="132" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="132" bodyend="150" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.hh" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1af69bddbd4b5b69cca2a8ad9931149c07" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::print</definition>
        <argsstring>(const sa::function &amp;) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="d7/d16/classsyntax__analyzer_1_1function" kindref="compound">sa::function</ref> &amp;</type>
          <defname>fun</defname>
        </param>
        <briefdescription>
<para>Print a concrete functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="153" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="153" bodyend="156" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.hh" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1a13987e86dc4cabc8e12c36fe8a5cbc47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::next_expression</definition>
        <argsstring>(const sa::expression &amp;expr)</argsstring>
        <name>next_expression</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="269" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="269" bodyend="282" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" declline="159" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1a177a78810d48743d9b71ff9c22818bc4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::print</definition>
        <argsstring>(const sa::expression &amp;, bool is_statement=false) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <defname>expr</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_statement</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Print a concrete expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the expression </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="162" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="162" bodyend="220" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.hh" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1ab1f863ab91da244edd2d926f9630f268" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::print</definition>
        <argsstring>(const sa::identifier &amp;) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="d1/d9f/classsyntax__analyzer_1_1identifier" kindref="compound">sa::identifier</ref> &amp;</type>
          <defname>ident</defname>
        </param>
        <briefdescription>
<para>Print a concrete identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="223" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="223" bodyend="232" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.hh" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d08/namespaceprinter_1aac96d10629fd998cd476471c7e344646" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string printer::print</definition>
        <argsstring>(const sa::expression &amp;, const std::string &amp;oper, const std::string &amp;separator, bool is_statement=false, unsigned skip_first_n=0) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="db/df3/classsyntax__analyzer_1_1expression" kindref="compound">sa::expression</ref> &amp;</type>
          <defname>expr</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oper</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_statement</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>unsigned</type>
          <declname>skip_first_n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Prints an operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oper</parametername>
</parameternamelist>
<parameterdescription>
<para>The stringified operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>The separator between operands </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The separator is required to be of length 2 (at least) </para>
</simplesect>
<simplesect kind="return"><para>The string representation of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="235" column="1" bodyfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" bodystart="235" bodyend="266" declfile="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.hh" declline="61" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/boki/.tmp/kivi/utils/ast_printer/ast_printer.cc" line="10" column="1"/>
  </compounddef>
</doxygen>
