<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="de/d36/argparse_8h" kind="file" language="C++">
    <compoundname>argparse.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">locale</includes>
    <includes local="no">map</includes>
    <includes local="no">numeric</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="7">
        <label>locale</label>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>cctype</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>/home/boki/KIVI/extern/argparse/argparse.h</label>
        <link refid="de/d36/argparse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="dc/ddd/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector" prot="public">argparse::detail::is_vector_impl::is_vector</innerclass>
    <innerclass refid="d5/d9e/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector_3_01std_1_1vector_3_01Args_8_8_8_01_4_01_4" prot="public">argparse::detail::is_vector_impl::is_vector&lt; std::vector&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="df/d5e/structargparse_1_1detail_1_1is__vector" prot="public">argparse::detail::is_vector</innerclass>
    <innerclass refid="d0/dbb/classargparse_1_1ArgumentParser" prot="public">argparse::ArgumentParser</innerclass>
    <innerclass refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" prot="public">argparse::ArgumentParser::Result</innerclass>
    <innerclass refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" prot="public">argparse::ArgumentParser::Argument</innerclass>
    <innernamespace refid="d6/d18/namespaceargparse">argparse</innernamespace>
    <innernamespace refid="d1/da8/namespaceargparse_1_1detail">argparse::detail</innernamespace>
    <innernamespace refid="d2/d23/namespaceargparse_1_1detail_1_1is__vector__impl">argparse::detail::is_vector_impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARGPARSE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARGPARSE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="d6/d18/namespaceargparse" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d6/d18/namespaceargparse" kindref="compound">argparse</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="d1/da8/namespaceargparse_1_1detail" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_not_space(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace(ch);<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ltrim(std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>s.erase(s.begin(),<sp/>std::find_if(s.begin(),<sp/>s.end(),<sp/>f));</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_rtrim(std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>s.erase(std::find_if(s.rbegin(),<sp/>s.rend(),<sp/>f).base(),<sp/>s.end());</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_trim(std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>_ltrim(s,<sp/>f);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>_rtrim(s,<sp/>f);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>_ltrim_copy(std::string<sp/>s,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>_ltrim(s,<sp/>f);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>_rtrim_copy(std::string<sp/>s,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>_rtrim(s,<sp/>f);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>_trim_copy(std::string<sp/>s,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>_not_space)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>_trim(s,<sp/>f);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>_join(InputIt<sp/>begin,<sp/>InputIt<sp/>end,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>*begin++;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>separator;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>*begin++;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_is_number(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>iss(arg);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>iss<sp/>&gt;&gt;<sp/>std::noskipws<sp/>&gt;&gt;<sp/>f;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iss.eof()<sp/>&amp;&amp;<sp/>!iss.fail();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_find_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>find<sp/>graph<sp/>symbol<sp/>before<sp/>equal,<sp/>end<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>don&apos;t<sp/>accept<sp/>--asd)f=0<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>allow<sp/>--asd_f<sp/>and<sp/>--asd-f<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::ispunct(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s[i])))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_find_name_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::ispunct(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s[i])))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="d2/d23/namespaceargparse_1_1detail_1_1is__vector__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">is_vector_impl<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="101" refid="dc/ddd/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/ddd/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector" kindref="compound">is_vector</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="103" refid="d5/d9e/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector_3_01std_1_1vector_3_01Args_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/ddd/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector" kindref="compound">is_vector</ref>&lt;std::vector&lt;Args...&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>is_vector_impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>trait<sp/>to<sp/>utilize<sp/>the<sp/>implementation<sp/>type<sp/>traits<sp/>as<sp/>well<sp/>as<sp/>decay<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="109" refid="df/d5e/structargparse_1_1detail_1_1is__vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d5e/structargparse_1_1detail_1_1is__vector" kindref="compound">is_vector</ref><sp/>{</highlight></codeline>
<codeline lineno="110" refid="df/d5e/structargparse_1_1detail_1_1is__vector_1aff82776fc6740c9a0112403b5caa9867" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d5e/structargparse_1_1detail_1_1is__vector_1aff82776fc6740c9a0112403b5caa9867" kindref="member">value</ref><sp/>=</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/ddd/structargparse_1_1detail_1_1is__vector__impl_1_1is__vector" kindref="compound">is_vector_impl::is_vector&lt;typename std::decay&lt;T&gt;::type</ref>&gt;<ref refid="df/d5e/structargparse_1_1detail_1_1is__vector_1aff82776fc6740c9a0112403b5caa9867" kindref="member">::value</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="d0/dbb/classargparse_1_1ArgumentParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/dbb/classargparse_1_1ArgumentParser" kindref="compound">ArgumentParser</ref><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a497007f211a2c44d186f8df1ba70f727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a497007f211a2c44d186f8df1ba70f727" kindref="member">Result</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="123" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a8fed6f5a2d2ca367c14c3aec5a5bb8b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a8fed6f5a2d2ca367c14c3aec5a5bb8b3" kindref="member">Result</ref>(std::string<sp/>err)<sp/>noexcept<sp/>:<sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7622cdba5c2b26d69658372e371e8bcb" kindref="member">_error</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a1ecefe505b1c937306c465be49794306" kindref="member">_what</ref>(err)<sp/>{}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a8c955165e06ef847d505d46f812e50ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7622cdba5c2b26d69658372e371e8bcb" kindref="member">_error</ref>;<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1ae5be630670d1dd3d8596e1d010a6136b" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>&amp;dt);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7a829e45782188b0d0d5607433f12a12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7a829e45782188b0d0d5607433f12a12" kindref="member">what</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a1ecefe505b1c937306c465be49794306" kindref="member">_what</ref>;<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7622cdba5c2b26d69658372e371e8bcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7622cdba5c2b26d69658372e371e8bcb" kindref="member">_error</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="133" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a1ecefe505b1c937306c465be49794306" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a1ecefe505b1c937306c465be49794306" kindref="member">_what</ref>{};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a2ff8f15a2642170e4459ddb9445f3f74adebbafe2b07d7e738d215d3498741531" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a2ff8f15a2642170e4459ddb9445f3f74" kindref="member">Position</ref><sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a2ff8f15a2642170e4459ddb9445f3f74a6eadd924b8d586ebebf9bd96c4ecc876" kindref="member">LAST</ref><sp/>=<sp/>-1,<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a2ff8f15a2642170e4459ddb9445f3f74adebbafe2b07d7e738d215d3498741531" kindref="member">DONT_CARE</ref><sp/>=<sp/>-2<sp/>};</highlight></codeline>
<codeline lineno="139" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ab23f07421906d6a8f68e5aa42a17a523a35afad2d0315f008296914681bb8b4f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ab23f07421906d6a8f68e5aa42a17a523" kindref="member">Count</ref><sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ab23f07421906d6a8f68e5aa42a17a523a35afad2d0315f008296914681bb8b4f8" kindref="member">ANY</ref><sp/>=<sp/>-1<sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" kindref="member">name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>.push_back(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae93a7516b1bf66e99a0fe6a1011543e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae93a7516b1bf66e99a0fe6a1011543e4" kindref="member">names</ref>(std::vector&lt;std::string&gt;<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae93a7516b1bf66e99a0fe6a1011543e4" kindref="member">names</ref>)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>.insert(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>.end(),<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae93a7516b1bf66e99a0fe6a1011543e4" kindref="member">names</ref>.begin(),<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae93a7516b1bf66e99a0fe6a1011543e4" kindref="member">names</ref>.end());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aebfa6024fa5745fcb229e538d7fd5035" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aebfa6024fa5745fcb229e538d7fd5035" kindref="member">description</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aebfa6024fa5745fcb229e538d7fd5035" kindref="member">description</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae0d2ed974da8162a9f97c022e21f1e82" kindref="member">_desc</ref><sp/>=<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aebfa6024fa5745fcb229e538d7fd5035" kindref="member">description</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ad6f780cc3d77bf267a75ab64d8fa6bda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ad6f780cc3d77bf267a75ab64d8fa6bda" kindref="member">required</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>req)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a6bfed0ce06a2814a8cafbbfdfd05e31c" kindref="member">_required</ref><sp/>=<sp/>req;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" kindref="member">position</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" kindref="member">position</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" kindref="member">position</ref><sp/>!=<sp/>Position::LAST)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>+<sp/>1<sp/>because<sp/>technically<sp/>argument<sp/>zero<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" kindref="member">_position</ref><sp/>=<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" kindref="member">position</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" kindref="member">_position</ref><sp/>=<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1a98e359c912112e1458d8fff1afc060" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a30cee792f48fe8e77f2a0b9b4fa7ccbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a30cee792f48fe8e77f2a0b9b4fa7ccbc" kindref="member">count</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a30cee792f48fe8e77f2a0b9b4fa7ccbc" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref><sp/>=<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a30cee792f48fe8e77f2a0b9b4fa7ccbc" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a989337f6facf573f2770323532f93cd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a989337f6facf573f2770323532f93cd2" kindref="member">found</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a66068492b9d398a658496813bd9c3bc0" kindref="member">_found</ref>;<sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="180" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a42a28939db1bab338d710b5feb112f54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d0a/namespaceCatch_1_1Generators_1a3c4989dd0dca44455f55484cedaa18da" kindref="member">std::enable_if&lt;detail::is_vector&lt;T&gt;::value</ref>,<sp/>T&gt;::type<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a42a28939db1bab338d710b5feb112f54" kindref="member">get</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>T();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type<sp/>vt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>in(s);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>vt;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.push_back(vt);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="192" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aabe8557ef7149be6bc6a1e9b76b6f512" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d0a/namespaceCatch_1_1Generators_1a3c4989dd0dca44455f55484cedaa18da" kindref="member">std::enable_if&lt;!detail::is_vector&lt;T&gt;::value</ref>,<sp/>T&gt;::type<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1aabe8557ef7149be6bc6a1e9b76b6f512" kindref="member">get</ref>()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>in(get&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>T();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>t<sp/>&gt;&gt;<sp/>std::ws;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1e5876e2550a567a64e0922057d66775" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a1e5876e2550a567a64e0922057d66775" kindref="member">Argument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;desc,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ad6f780cc3d77bf267a75ab64d8fa6bda" kindref="member">required</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae0d2ed974da8162a9f97c022e21f1e82" kindref="member">_desc</ref>(desc),<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a6bfed0ce06a2814a8cafbbfdfd05e31c" kindref="member">_required</ref>(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ad6f780cc3d77bf267a75ab64d8fa6bda" kindref="member">required</ref>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>.push_back(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a9ff526d0dfcb165c59df306bfd32cb48" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a0e17658408b3a4bb15309c71558dc92c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a0e17658408b3a4bb15309c71558dc92c" kindref="member">Argument</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a55c9e1ac006a645af402e3aee6b64e00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/dbb/classargparse_1_1ArgumentParser" kindref="compound">ArgumentParser</ref>;</highlight></codeline>
<codeline lineno="209" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" kindref="member">_position</ref>{Position::DONT_CARE};</highlight></codeline>
<codeline lineno="210" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref>{Count::ANY};</highlight></codeline>
<codeline lineno="211" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>{};</highlight></codeline>
<codeline lineno="212" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae0d2ed974da8162a9f97c022e21f1e82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae0d2ed974da8162a9f97c022e21f1e82" kindref="member">_desc</ref>{};</highlight></codeline>
<codeline lineno="213" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a66068492b9d398a658496813bd9c3bc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a66068492b9d398a658496813bd9c3bc0" kindref="member">_found</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="214" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a6bfed0ce06a2814a8cafbbfdfd05e31c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a6bfed0ce06a2814a8cafbbfdfd05e31c" kindref="member">_required</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="215" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3a5b1e9750b41873f0a6212d5b33c99b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3a5b1e9750b41873f0a6212d5b33c99b" kindref="member">_index</ref>{-1};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>{};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="d0/dbb/classargparse_1_1ArgumentParser_1ad4d8cd51b18ffcfe60da2b488e48f807" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad4d8cd51b18ffcfe60da2b488e48f807" kindref="member">ArgumentParser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;bin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;desc)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a3f32928ac837c9de4f89e3a76154d765" kindref="member">_bin</ref>(bin),<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a8c51427ae4f26315782851fb04d0bc39" kindref="member">_desc</ref>(desc)<sp/>{}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="d0/dbb/classargparse_1_1ArgumentParser_1a1a550f701add741fd810b08b5ce80e4b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a1a550f701add741fd810b08b5ce80e4b" kindref="member">add_argument</ref>()<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.push_back({});</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back()._index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="d0/dbb/classargparse_1_1ArgumentParser_1ac957cb1699ef51692ece8ff3e988dd9e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ac957cb1699ef51692ece8ff3e988dd9e" kindref="member">add_argument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;long_name,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.push_back(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref>(name,<sp/>desc,<sp/>required));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back()._names.push_back(long_name);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back()._index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="d0/dbb/classargparse_1_1ArgumentParser_1a67e60f68df05fc98bd7d2be33786e557" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a67e60f68df05fc98bd7d2be33786e557" kindref="member">add_argument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;desc,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.push_back(<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref>(name,<sp/>desc,<sp/>required));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back()._index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.back();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="d0/dbb/classargparse_1_1ArgumentParser_1a749616c7731c4583792eacc738dab97f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a749616c7731c4583792eacc738dab97f" kindref="member">print_help</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>page<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page<sp/>*<sp/>count<sp/>&gt;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Usage:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a3f32928ac837c9de4f89e3a76154d765" kindref="member">_bin</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[options...]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.first<sp/>!=<sp/>Argument::Position::LAST)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>current<sp/>&lt;<sp/>v.first;<sp/>current++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>current<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>detail::_ltrim_copy(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.second)]._names[0],</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>c<sp/>!=<sp/>static_cast&lt;int&gt;(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.find(Argument::Position::LAST);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[options...]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[options...]<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>detail::_ltrim_copy(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it-&gt;second)]._names[0],</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>c<sp/>!=<sp/>static_cast&lt;int&gt;(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Options:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>page<sp/>*<sp/>count;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>std::min&lt;size_t&gt;(page<sp/>*<sp/>count<sp/>+<sp/>count,<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>.size());<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[i];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>[0];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.append(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>[n]);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(23)<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>std::setw(23)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ae0d2ed974da8162a9f97c022e21f1e82" kindref="member">_desc</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a6bfed0ce06a2814a8cafbbfdfd05e31c" kindref="member">_required</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(Required)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d39/namespaceCatch_1a50af73c5a37ad5c6558df4ce4a275e83" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="d0/dbb/classargparse_1_1ArgumentParser_1aacdcf9499f15c63f9a3774749bafdb72" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1aacdcf9499f15c63f9a3774749bafdb72" kindref="member">parse</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>err;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>name<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;n<sp/>:<sp/>a._names)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>detail::_ltrim_copy(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.find(name)<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>of<sp/>argument<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>[name]<sp/>=<sp/>a._index;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a._position<sp/>&gt;=<sp/>0<sp/>||<sp/>a._position<sp/>==<sp/>Argument::Position::LAST)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>[a._position]<sp/>=<sp/>a._index;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>current_arg;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_len;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argv_index<sp/>=<sp/>1;<sp/>argv_index<sp/>&lt;<sp/>argc;<sp/>++argv_index)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_arg<sp/>=<sp/>std::string(argv[argv_index]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_len<sp/>=<sp/>current_arg.length();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a00703e66a8f33e851bc75605b22daefb" kindref="member">_help_enabled</ref><sp/>&amp;&amp;<sp/>(current_arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal"><sp/>||<sp/>current_arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>[</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">])]._found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv_index<sp/>==<sp/>argc<sp/>-<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.find(Argument::Position::LAST)<sp/>!=</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>b<sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" kindref="member">_add_value</ref>(current_arg,<sp/>Argument::Position::LAST);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_len<sp/>&gt;=<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!detail::_is_number(current_arg))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>ignores<sp/>the<sp/>case<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>arg<sp/>is<sp/>just<sp/>a<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>-a<sp/>(short)<sp/>or<sp/>--arg<sp/>(long)<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_arg[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>--arg<sp/>(long)<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_arg[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" kindref="member">_begin_argument</ref>(current_arg.substr(2),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>argv_index);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>short<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" kindref="member">_begin_argument</ref>(current_arg.substr(1),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>argv_index);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" kindref="member">_add_value</ref>(current_arg,<sp/>argv_index);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" kindref="member">_add_value</ref>(current_arg,<sp/>argv_index);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a00703e66a8f33e851bc75605b22daefb" kindref="member">_help_enabled</ref><sp/>&amp;&amp;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a777d03e86fca6a56f861fafddb852c27" kindref="member">exists</ref>(</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p.second)];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>[0][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>detail::_ltrim_copy(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>[0],<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>c<sp/>!=<sp/>static_cast&lt;int&gt;(</highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.find(name)<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" kindref="member">_position</ref><sp/>==<sp/>Argument::Position::LAST)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Poisitional<sp/>argument<sp/>expected<sp/>at<sp/>the<sp/>end,<sp/>but<sp/>argument<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>found<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Poisitional<sp/>argument<sp/>expected<sp/>in<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a7e8862907b0ad2f9f3cd52f5810d9843" kindref="member">_position</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>argument<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>found<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a._required<sp/>&amp;&amp;<sp/>!a._found)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Required<sp/>argument<sp/>not<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a._names[0]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a._position<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>argc<sp/>&gt;=<sp/>a._position<sp/>&amp;&amp;<sp/>!a._found)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Argument<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a._names[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>expected<sp/>in<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(a._position));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="d0/dbb/classargparse_1_1ArgumentParser_1a96ed4d93c45f08b7f2c1f04571d9a1a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a96ed4d93c45f08b7f2c1f04571d9a1a9" kindref="member">enable_help</ref>()<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a1a550f701add741fd810b08b5ce80e4b" kindref="member">add_argument</ref>(</highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Shows<sp/>this<sp/>page&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a00703e66a8f33e851bc75605b22daefb" kindref="member">_help_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="d0/dbb/classargparse_1_1ArgumentParser_1a777d03e86fca6a56f861fafddb852c27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a777d03e86fca6a56f861fafddb852c27" kindref="member">exists</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>n<sp/>=<sp/>detail::_ltrim_copy(</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.find(n);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it-&gt;second)]._found;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="435" refid="d0/dbb/classargparse_1_1ArgumentParser_1a4360cb7b6a4e82fab66206e3462c8732" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a4360cb7b6a4e82fab66206e3462c8732" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.find(name);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t-&gt;second)].get&lt;T&gt;();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="444" refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" kindref="member">_begin_argument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>longarg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.find(position);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it-&gt;second)];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.push_back((longarg<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>+<sp/>arg);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a66068492b9d398a658496813bd9c3bc0" kindref="member">_found</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref><sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Current<sp/>argument<sp/>left<sp/>open&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_end<sp/>=<sp/>detail::_find_name_end(arg);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>arg_name<sp/>=<sp/>arg.substr(0,<sp/>name_end);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(longarg)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>equal_pos<sp/>=<sp/>detail::_find_equal(arg);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nmf<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.find(arg_name);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmf<sp/>==<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>command<sp/>line<sp/>option<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>arg_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref><sp/>=<sp/>nmf-&gt;second;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nmf-&gt;second)]._found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal_pos<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(equal_pos<sp/>&lt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_name.length()<sp/>&lt;<sp/>arg.length()))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>malformed<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Malformed<sp/>argument:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>arg);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal_pos<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>arg_value<sp/>=<sp/>arg.substr(name_end<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" kindref="member">_add_value</ref>(arg_value,<sp/>position);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>r;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_name.length()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" kindref="member">_begin_argument</ref>(arg,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>position);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>arg_name)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1ad97ff65553aa649c4fcb903ebd60a918" kindref="member">_begin_argument</ref>(std::string(1,<sp/>c),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>position);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a45affa0f7e5baaeac7775f49e603ae5c" kindref="member">_add_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="d0/d0a/namespaceCatch_1_1Generators_1a3c4989dd0dca44455f55484cedaa18da" kindref="member">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/>err;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref>)];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.size())<sp/>&gt;=<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>unnamed;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.push_back(<ref refid="d0/d0a/namespaceCatch_1_1Generators_1a3c4989dd0dca44455f55484cedaa18da" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.size())<sp/>&gt;=<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>unnamed:</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.find(location);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it-&gt;second)];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.push_back(<ref refid="d0/d0a/namespaceCatch_1_1Generators_1a3c4989dd0dca44455f55484cedaa18da" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a66068492b9d398a658496813bd9c3bc0" kindref="member">_found</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a933e5c9333edffcc408428fd51b507eb" kindref="member">_end_argument</ref>()<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument" kindref="compound">Argument</ref><sp/>&amp;a<sp/>=<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref>)];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.size())<sp/>&lt;<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>few<sp/>arguments<sp/>given<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>[0]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1ac7003d0cf309e8df1c33f5a45e78b02e" kindref="member">_values</ref>.size())<sp/>&gt;<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a35c56355c9282872a697a0abba6e8819" kindref="member">_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>arguments<sp/>given<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>a.<ref refid="dd/d22/classargparse_1_1ArgumentParser_1_1Argument_1a3e8ebd489a54bac34e89e3bdefc13111" kindref="member">_names</ref>[0]);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">Result</ref>();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="d0/dbb/classargparse_1_1ArgumentParser_1a00703e66a8f33e851bc75605b22daefb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a00703e66a8f33e851bc75605b22daefb" kindref="member">_help_enabled</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="543" refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a843f734b8aa2c66cf101029f4e2133ff" kindref="member">_current</ref>{-1};</highlight></codeline>
<codeline lineno="544" refid="d0/dbb/classargparse_1_1ArgumentParser_1a3f32928ac837c9de4f89e3a76154d765" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a3f32928ac837c9de4f89e3a76154d765" kindref="member">_bin</ref>{};</highlight></codeline>
<codeline lineno="545" refid="d0/dbb/classargparse_1_1ArgumentParser_1a8c51427ae4f26315782851fb04d0bc39" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a8c51427ae4f26315782851fb04d0bc39" kindref="member">_desc</ref>{};</highlight></codeline>
<codeline lineno="546" refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Argument&gt;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a556acb0d40fb318b9f0789d1f1608715" kindref="member">_arguments</ref>{};</highlight></codeline>
<codeline lineno="547" refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>int&gt;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a261130bc65541e170dab0a4874b93efe" kindref="member">_positional_arguments</ref>{};</highlight></codeline>
<codeline lineno="548" refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="d0/dbb/classargparse_1_1ArgumentParser_1a6906b62255434a727a798e3d458654e9" kindref="member">_name_map</ref>{};</highlight></codeline>
<codeline lineno="549"><highlight class="normal">};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1ae5be630670d1dd3d8596e1d010a6136b" refkind="member"><highlight class="normal">std::ostream<sp/>&amp;<ref refid="d6/d18/namespaceargparse_1a7b7be8810b8db22c35769c2a9048df2e" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result" kindref="compound">ArgumentParser::Result</ref><sp/>&amp;r)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>r.<ref refid="d3/dc0/classargparse_1_1ArgumentParser_1_1Result_1a7a829e45782188b0d0d5607433f12a12" kindref="member">what</ref>();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="556" refid="d6/d18/namespaceargparse_1a225e9a97f89239969a3b22c24c21d309" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>ArgumentParser::Argument::get&lt;std::string&gt;()<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::_join(_values.begin(),<sp/>_values.end());</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">ArgumentParser::Argument::get&lt;std::vector&lt;std::string&gt;&gt;()<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_values;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>argparse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/boki/KIVI/extern/argparse/argparse.h"/>
  </compounddef>
</doxygen>
