<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d6/d85/dev_2conventions_8md" kind="file" language="Markdown">
    <compoundname>conventions.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">###<sp/>Code<sp/>convention<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Naming</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Namespaces:<sp/>*snake_case*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Classes:<sp/>*snake_case*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Class<sp/>members:<sp/>*`m_`<sp/>prefixed<sp/>snake_case*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Class<sp/>member<sp/>getters:<sp/>*class_member<sp/>name<sp/>without<sp/>the<sp/>`m_`<sp/>prefix*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Interfaces<sp/>=&gt;<sp/>*`I_`<sp/>prefixed<sp/>snake_case*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>_source_:<sp/>`snake_case.cc`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>_header_:<sp/>`snake_case.hh`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Structure</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Each<sp/>directory<sp/>is<sp/>compiled<sp/>as<sp/>a<sp/>separate<sp/>library<sp/>which<sp/>gets<sp/>included</highlight></codeline>
<codeline><highlight class="normal">from<sp/>higher<sp/>level<sp/>client<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Classes</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Class<sp/>definitions<sp/>follow<sp/>this<sp/>structure:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Brief<sp/>description</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>example_class<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Info<sp/>about<sp/>`m_field1`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>m_field1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Info<sp/>about<sp/>`m_field2`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>m_field2;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Constructors<sp/>and<sp/>destructors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/>[in|out]<sp/>param<sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>do_something1(type<sp/>param);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/>[in|out]<sp/>param1<sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/>[in|out]<sp/>param2<sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>do_something2(type<sp/>param1,<sp/>type<sp/>param2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Getters<sp/>(optionally<sp/>also<sp/>setters)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>field1()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m_field1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>----------------</highlight></codeline>
<codeline><highlight class="normal"><sp/>###<sp/>Includes</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>Include<sp/>order<sp/>is<sp/>the<sp/>following:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1.<sp/>Standard<sp/>library</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>2.<sp/>Other<sp/>external<sp/>libraries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>3.<sp/>Local<sp/>libraries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>4.<sp/>Local<sp/>headers</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Additional:**<sp/>New<sp/>line<sp/>between<sp/>each<sp/>category<sp/>may<sp/>improve<sp/>clarity<sp/>:)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Example</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;boost/...&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;local_lib/...&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;blah.hh&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-----------------</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Misc</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Prefer<sp/>initializing<sp/>with<sp/>`{}`<sp/>over<sp/>`()`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>Example</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>blah<sp/>b{blah_blah};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>using<sp/>the<sp/>syntax_analyzer<sp/>namespace,<sp/>prefer<sp/>`syntax_analyzer`<sp/>over<sp/>`sa`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>Use<sp/>`sa`<sp/>only<sp/>when<sp/>the<sp/>statement<sp/>is<sp/>too<sp/>long,<sp/>for<sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::variant&lt;sa::I_statement,<sp/>sa::function,<sp/>sa::identifier,<sp/>sa::I_expression,<sp/>sa::invalid&gt;<sp/>m_field;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>Do<sp/>prefer<sp/>`syntax_analyzer`<sp/>for<sp/>situations<sp/>like:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>syntax_analyzer::parsing_context<sp/>&amp;ctx;</highlight></codeline>
    </programlisting>
    <location file="dev/conventions.md"/>
  </compounddef>
</doxygen>
