<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/d2b/textbox_8hh" kind="file" language="C++">
    <compoundname>textbox.hh</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="d9/d96/ast__printer_8hh" local="no">/home/boki/KIVI/utils/ast_printer/ast_printer.hh</includedby>
    <incdepgraph>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="1">
        <label>/home/boki/KIVI/extern/textbox/textbox.hh</label>
        <link refid="d2/d2b/textbox_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/boki/KIVI/main.cc</label>
        <link refid="d9/d0f/main_8cc"/>
      </node>
      <node id="2">
        <label>/home/boki/KIVI/utils/ast_printer/ast_printer.hh</label>
        <link refid="d9/d96/ast__printer_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/boki/KIVI/utils/ast_printer/ast_printer.cc</label>
        <link refid="dc/df4/ast__printer_8cc"/>
      </node>
      <node id="1">
        <label>/home/boki/KIVI/extern/textbox/textbox.hh</label>
        <link refid="d2/d2b/textbox_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d0/daa/structtextbox" prot="public">textbox</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/d2b/textbox_8hh_1a17140cb0db78ffa3673569ca11baf697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParamType</type>
          </param>
          <param>
            <type>typename AtomCreator</type>
          </param>
          <param>
            <type>typename ParamCountFunc</type>
          </param>
          <param>
            <type>typename OneLinerFunc</type>
          </param>
          <param>
            <type>typename SimpleTestFunc</type>
          </param>
          <param>
            <type>typename Separate1stParamTestFunc</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref></type>
        <definition>textbox create_tree_graph</definition>
        <argsstring>(const ParamType &amp;e, std::size_t maxwidth, AtomCreator &amp;&amp;create_atom, ParamCountFunc &amp;&amp;count_children, OneLinerFunc &amp;&amp;oneliner_test, SimpleTestFunc &amp;&amp;simple_test, Separate1stParamTestFunc &amp;&amp;separate1st_test)</argsstring>
        <name>create_tree_graph</name>
        <param>
          <type>const ParamType &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxwidth</declname>
        </param>
        <param>
          <type>AtomCreator &amp;&amp;</type>
          <declname>create_atom</declname>
        </param>
        <param>
          <type>ParamCountFunc &amp;&amp;</type>
          <declname>count_children</declname>
        </param>
        <param>
          <type>OneLinerFunc &amp;&amp;</type>
          <declname>oneliner_test</declname>
        </param>
        <param>
          <type>SimpleTestFunc &amp;&amp;</type>
          <declname>simple_test</declname>
        </param>
        <param>
          <type>Separate1stParamTestFunc &amp;&amp;</type>
          <declname>separate1st_test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/KIVI/extern/textbox/textbox.hh" line="280" column="9" bodyfile="/home/boki/KIVI/extern/textbox/textbox.hh" bodystart="280" bodyend="399"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>textbox:<sp/>Abstraction<sp/>for<sp/>2-dimensional<sp/>text<sp/>strings,<sp/>with<sp/>VT100<sp/>linedrawing<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Joel<sp/>Yliluoma<sp/>-<sp/>http://iki.fi/bisqwit/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>License:<sp/>MIT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Requires<sp/>a<sp/>C++17<sp/>capable<sp/>compiler<sp/>and<sp/>standard<sp/>library.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="d0/daa/structtextbox" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11" refid="d0/daa/structtextbox_1a0ce9ba6a47439ba0936a92fa7286e3d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a0ce9ba6a47439ba0936a92fa7286e3d1" kindref="member">enable_vt100</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12" refid="d0/daa/structtextbox_1aa3eda82346a22f480c207c32e138dfc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a47637707cb6b3f4868beef028eb995a4" kindref="member">u</ref>=1,<sp/><ref refid="d0/daa/structtextbox_1aa3eda82346a22f480c207c32e138dfc1" kindref="member">d</ref>=2,<sp/><ref refid="d0/daa/structtextbox_1aeca6702c8ea576b45a4b6a580d876cf1" kindref="member">l</ref>=4,<sp/><ref refid="d0/daa/structtextbox_1a585387cb7a236c15587c34abf4401238" kindref="member">r</ref>=8,<sp/><ref refid="d0/daa/structtextbox_1a4de3d73c1e6af3081cb6e02d97611e37" kindref="member">nonline</ref><sp/>=<sp/>~(<ref refid="d0/daa/structtextbox_1a47637707cb6b3f4868beef028eb995a4" kindref="member">u</ref>+<ref refid="d0/daa/structtextbox_1aa3eda82346a22f480c207c32e138dfc1" kindref="member">d</ref>+<ref refid="d0/daa/structtextbox_1aeca6702c8ea576b45a4b6a580d876cf1" kindref="member">l</ref>+<ref refid="d0/daa/structtextbox_1a585387cb7a236c15587c34abf4401238" kindref="member">r</ref>);<sp/></highlight><highlight class="comment">//<sp/>bitmasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>a<sp/>single<sp/>character<sp/>in<sp/>the<sp/>given<sp/>coordinate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Notice<sp/>that<sp/>behavior<sp/>is<sp/>undefined<sp/>if<sp/>the<sp/>character<sp/>is<sp/>in<sp/>00-1F<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="d0/daa/structtextbox_1a027de4c0cc1cb1c5a1b11c4a7382275f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a027de4c0cc1cb1c5a1b11c4a7382275f" kindref="member">putchar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>std::size_t<sp/>x,<sp/>std::size_t<sp/>y)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size())<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.resize(y+1);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size()<sp/>==<sp/>x)<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y]<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size()<sp/>&lt;<sp/>x)<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].resize(x+1,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y][x]<sp/>=<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Modify<sp/>a<sp/>character<sp/>using<sp/>a<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="27" refid="d0/daa/structtextbox_1a189c5dce550c0efd0803bc542d566996" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a189c5dce550c0efd0803bc542d566996" kindref="member">modchar</ref>(std::size_t<sp/>x,<sp/>std::size_t<sp/>y,<sp/>F&amp;&amp;<sp/>func)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size())<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.resize(y+1);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size()<sp/>&lt;=<sp/>x)<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].resize(x+1,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y][x]);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>a<sp/>string<sp/>of<sp/>characters<sp/>starting<sp/>at<sp/>the<sp/>given<sp/>coordinate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>behavior<sp/>is<sp/>undefined<sp/>if<sp/>the<sp/>string<sp/>contains<sp/>characters<sp/>in<sp/>00-1F<sp/>range</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>if<sp/>the<sp/>string<sp/>includes<sp/>multibyte<sp/>characters.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="d0/daa/structtextbox_1a58662b70d515ef93a41da09862a16d09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a58662b70d515ef93a41da09862a16d09" kindref="member">putline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/>std::size_t<sp/>x,<sp/>std::size_t<sp/>y)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size())<sp/>{<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.resize(y+1);<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size())<sp/>{<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].append(x<sp/>-<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>begin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>x<sp/>&lt;<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].size()<sp/>&amp;&amp;<sp/>begin<sp/>&lt;<sp/>s.size();<sp/>++begin,<sp/>++x)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[begin];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>!c)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;tgt<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y][x];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tgt==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>!tgt<sp/>||<sp/>(c&amp;<ref refid="d0/daa/structtextbox_1a4de3d73c1e6af3081cb6e02d97611e37" kindref="member">nonline</ref>))<sp/>tgt<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tgt&amp;<ref refid="d0/daa/structtextbox_1a4de3d73c1e6af3081cb6e02d97611e37" kindref="member">nonline</ref>)<sp/>tgt=0;<sp/>tgt|=c;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s.size()<sp/>&gt;<sp/>begin)<sp/>{<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y].append(s,<sp/>begin,<sp/>s.size()-begin);<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>a<sp/>2D<sp/>string<sp/>starting<sp/>at<sp/>the<sp/>given<sp/>coordinate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="d0/daa/structtextbox_1a8c5aa4a6ca8372eb4d0116d21abdb021" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a8c5aa4a6ca8372eb4d0116d21abdb021" kindref="member">putbox</ref>(std::size_t<sp/>x,<sp/>std::size_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>b.<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size();<sp/>++p)<sp/><ref refid="d0/daa/structtextbox_1a58662b70d515ef93a41da09862a16d09" kindref="member">putline</ref>(b.<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[p],<sp/>x,<sp/>y+p);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>trailing<sp/>blank<sp/>from<sp/>the<sp/>bottom<sp/>and<sp/>right<sp/>edges<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="d0/daa/structtextbox_1a94889342cfd37bf11d85dc3f6d606079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a94889342cfd37bf11d85dc3f6d606079" kindref="member">trim</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s:<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(end<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(s[end-1]==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[end-1]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))<sp/>{<sp/>--end;<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(end);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.empty()<sp/>&amp;&amp;<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.back().empty())<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.pop_back();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>current<sp/>dimensions<sp/>of<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="71" refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>()</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s:<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>)<sp/>result<sp/>=<sp/>std::max(result,<sp/>s.size());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Draw<sp/>a<sp/>horizontal<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>bef=true,<sp/>the<sp/>line<sp/>starts<sp/>from<sp/>the<sp/>left<sp/>edge<sp/>of<sp/>the<sp/>first<sp/>character<sp/>cell,<sp/>otherwise<sp/>it<sp/>starts<sp/>from<sp/>its<sp/>center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>aft=true,<sp/>the<sp/>line<sp/>ends<sp/>in<sp/>the<sp/>right<sp/>edge<sp/>of<sp/>the<sp/>last<sp/>character<sp/>cell,<sp/>otherwise<sp/>it<sp/>ends<sp/>in<sp/>its<sp/>center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" kindref="member">hline</ref>(std::size_t<sp/>x,<sp/>std::size_t<sp/>y,<sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bef,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aft)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>p=0;<sp/>p&lt;<ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>;<sp/>++p)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox_1a189c5dce550c0efd0803bc542d566996" kindref="member">modchar</ref>(x+p,<sp/>y,<sp/>[&amp;](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c&amp;<ref refid="d0/daa/structtextbox_1a4de3d73c1e6af3081cb6e02d97611e37" kindref="member">nonline</ref>)<sp/>c=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p&gt;0||bef)<sp/>c<sp/>|=<sp/><ref refid="d0/daa/structtextbox_1aeca6702c8ea576b45a4b6a580d876cf1" kindref="member">l</ref>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aft||(p+1)&lt;<ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>)<sp/>c<sp/>|=<sp/><ref refid="d0/daa/structtextbox_1a585387cb7a236c15587c34abf4401238" kindref="member">r</ref>;<sp/>});</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Draw<sp/>a<sp/>vertical<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>bef=true,<sp/>the<sp/>line<sp/>starts<sp/>from<sp/>the<sp/>top<sp/>edge<sp/>of<sp/>the<sp/>first<sp/>character<sp/>cell,<sp/>otherwise<sp/>it<sp/>starts<sp/>from<sp/>its<sp/>center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>aft=true,<sp/>the<sp/>line<sp/>ends<sp/>in<sp/>the<sp/>bottom<sp/>edge<sp/>of<sp/>the<sp/>last<sp/>character<sp/>cell,<sp/>otherwise<sp/>it<sp/>ends<sp/>in<sp/>its<sp/>center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" kindref="member">vline</ref>(std::size_t<sp/>x,<sp/>std::size_t<sp/>y,<sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bef,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aft)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>p=0;<sp/>p&lt;<ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>;<sp/>++p)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox_1a189c5dce550c0efd0803bc542d566996" kindref="member">modchar</ref>(x,<sp/>y+p,<sp/>[&amp;](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c&amp;<ref refid="d0/daa/structtextbox_1a4de3d73c1e6af3081cb6e02d97611e37" kindref="member">nonline</ref>)<sp/>c=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p&gt;0||bef)<sp/>c<sp/>|=<sp/><ref refid="d0/daa/structtextbox_1a47637707cb6b3f4868beef028eb995a4" kindref="member">u</ref>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aft||(p+1)&lt;<ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>)<sp/>c<sp/>|=<sp/><ref refid="d0/daa/structtextbox_1aa3eda82346a22f480c207c32e138dfc1" kindref="member">d</ref>;<sp/>});</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>earliest<sp/>X<sp/>coordinate<sp/>where<sp/>the<sp/>given<sp/>box<sp/>could<sp/>be<sp/>placed</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>without<sp/>colliding<sp/>with<sp/>existing<sp/>content<sp/>in<sp/>this<sp/>box.<sp/>Guaranteed<sp/>to<sp/>be<sp/>&lt;=<sp/>width().</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" kindref="member">horiz_append_position</ref>(std::size_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>leftmost<sp/>position<sp/>where<sp/>box<sp/>b<sp/>can<sp/>be<sp/>appended<sp/>into<sp/>*this<sp/>without<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mywidth<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>()</highlight><highlight class="comment">/*,<sp/>myheight<sp/>=<sp/>height()*/</highlight><highlight class="normal">,<sp/>theirheight<sp/>=<sp/>b.<ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>reduce<sp/>=<sp/>mywidth;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>p=0;<sp/>p&lt;theirheight;<sp/>++p)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>theirpadding<sp/>=<sp/>b.<ref refid="d0/daa/structtextbox_1aba299d8c4284ba1b62fa4b2f7d7a2b35" kindref="member">FindLeftPadding</ref>(p);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mypadding<sp/><sp/><sp/><sp/>=<sp/><ref refid="d0/daa/structtextbox_1a1ad2f2224461ccaa14976073cec861fd" kindref="member">FindRightPadding</ref>(y+p);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reduce<sp/>=<sp/>std::min(reduce,<sp/>mypadding<sp/>+<sp/>theirpadding);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mywidth<sp/>-<sp/>reduce;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>earliest<sp/>Y<sp/>coordinate<sp/>where<sp/>the<sp/>given<sp/>box<sp/>could<sp/>be<sp/>placed</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>without<sp/>colliding<sp/>with<sp/>existing<sp/>content<sp/>in<sp/>this<sp/>box.<sp/>Guaranteed<sp/>to<sp/>be<sp/>&lt;=<sp/>height().</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="d0/daa/structtextbox_1aea52598f2069f9f726869c7d9bf30eac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1aea52598f2069f9f726869c7d9bf30eac" kindref="member">vert_append_position</ref>(std::size_t<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>topmost<sp/>position<sp/>where<sp/>box<sp/>b<sp/>can<sp/>be<sp/>appended<sp/>into<sp/>*this<sp/>without<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/></highlight><highlight class="comment">/*mywidth<sp/>=<sp/>width(),<sp/>*/</highlight><highlight class="normal">myheight<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>(),<sp/>theirwidth<sp/>=<sp/>b.<ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>reduce<sp/>=<sp/>myheight;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>p=0;<sp/>p&lt;theirwidth;<sp/>++p)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>theirpadding<sp/>=<sp/>b.<ref refid="d0/daa/structtextbox_1ad962f6558a4b01693e6983fb40589de0" kindref="member">FindTopPadding</ref>(p);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mypadding<sp/><sp/><sp/><sp/>=<sp/><ref refid="d0/daa/structtextbox_1a1d228126520780d37997b819034a0801" kindref="member">FindBottomPadding</ref>(x+p);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reduce<sp/>=<sp/>std::min(reduce,<sp/>mypadding<sp/>+<sp/>theirpadding);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myheight<sp/>-<sp/>reduce;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Converts<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>box<sp/>into<sp/>a<sp/>std::string<sp/>with<sp/>linefeeds<sp/>and<sp/>VT100<sp/>escapes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>enable_vt100<sp/>is<sp/>false,<sp/>renders<sp/>using<sp/>plain<sp/>ASCII<sp/>instead.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="d0/daa/structtextbox_1a1e0ef9680b2279be5b5514b78b5545bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="d0/daa/structtextbox_1a1e0ef9680b2279be5b5514b78b5545bb" kindref="member">to_string</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="134"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>drawing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>quo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>space<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>unstr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cur_attr;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linedraw<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a0ce9ba6a47439ba0936a92fa7286e3d1" kindref="member">enable_vt100</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;xxxqjkuqmltqvwn&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;|||-&apos;.+-`,+-+++&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attr<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="d0/daa/structtextbox_1a0ce9ba6a47439ba0936a92fa7286e3d1" kindref="member">enable_vt100</ref>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cur_attr!=s)<sp/>{<sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\33[&quot;</highlight><highlight class="normal">;<sp/>result<sp/>+=<sp/>s;<sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">;<sp/>cur_attr<sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>append<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="d0/daa/structtextbox_1a0ce9ba6a47439ba0936a92fa7286e3d1" kindref="member">enable_vt100</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>num<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v&amp;&amp;!drawing)<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>a<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0;32&quot;</highlight><highlight class="normal">;<sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\33)0\16&quot;</highlight><highlight class="normal">;<sp/>drawing<sp/>=<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v&amp;&amp;drawing)<sp/>{<sp/>a<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\33)B\17&quot;</highlight><highlight class="normal">;<sp/>drawing<sp/>=<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v<sp/>&amp;&amp;<sp/>c==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>quo<sp/>=<sp/>!quo;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(quo)<sp/>a<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1;34&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v<sp/>&amp;&amp;<sp/>!quo<sp/>&amp;&amp;<sp/>((c&gt;=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))<sp/>{<sp/>a<sp/>=<sp/>space<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1;38;5;165&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0;38;5;246&quot;</highlight><highlight class="normal">;<sp/>num=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v<sp/>&amp;&amp;<sp/>!quo<sp/>&amp;&amp;<sp/>((c&gt;=</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">))<sp/>{<sp/>a<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1;37&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v<sp/>&amp;&amp;<sp/>!quo<sp/>&amp;&amp;<sp/>c&gt;=</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>a<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0;38;5;246&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v<sp/>&amp;&amp;<sp/>!quo<sp/>&amp;&amp;<sp/>c==</highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">)<sp/>{<sp/>unstr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>unstr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unstr)<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a)<sp/>attr(a);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!num)<sp/>space<sp/>=<sp/>(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>h<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a0606e52c7517a8f685bc827902dc79d3" kindref="member">height</ref>(),<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>s.size();<sp/>++x)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[x];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>16)<sp/>append(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>linedraw[c-1]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181" refid="d0/daa/structtextbox_1aba299d8c4284ba1b62fa4b2f7d7a2b35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1aba299d8c4284ba1b62fa4b2f7d7a2b35" kindref="member">FindLeftPadding</ref>(std::size_t<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="182"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>max<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>(),<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>line<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(result<sp/>&lt;<sp/>line.size()<sp/>&amp;&amp;<sp/>(line[result]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>line[result]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>++result;<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190" refid="d0/daa/structtextbox_1a1ad2f2224461ccaa14976073cec861fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a1ad2f2224461ccaa14976073cec861fd" kindref="member">FindRightPadding</ref>(std::size_t<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="191"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>max<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>(),<sp/>position<sp/>=<sp/>max,<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>line<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[y];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(position--<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(position<sp/>&gt;=<sp/>line.size()<sp/>||<sp/>line[position]==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>line[position]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>++result;<sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199" refid="d0/daa/structtextbox_1ad962f6558a4b01693e6983fb40589de0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1ad962f6558a4b01693e6983fb40589de0" kindref="member">FindTopPadding</ref>(std::size_t<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="200"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>result<sp/>=<sp/>0,<sp/>max<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(result<sp/>&lt;<sp/>max<sp/>&amp;&amp;<sp/>(x<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[result].size()<sp/>||<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[result][x]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[result][x]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>++result;<sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206" refid="d0/daa/structtextbox_1a1d228126520780d37997b819034a0801" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d0/daa/structtextbox_1a1d228126520780d37997b819034a0801" kindref="member">FindBottomPadding</ref>(std::size_t<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="207"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>result<sp/>=<sp/>0,<sp/>max<sp/>=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>.size(),<sp/>position<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(position--<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(x<sp/>&gt;=<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[position].size()<sp/>||<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[position][x]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="d0/daa/structtextbox_1a55ff996d19622962f155a87e23d27873" kindref="member">data</ref>[position][x]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>++result;<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>An<sp/>utility<sp/>function<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>create<sp/>a<sp/>tree<sp/>graph<sp/>rendering<sp/>from<sp/>a<sp/>structure.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/>e:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>element<sp/>that<sp/>will<sp/>be<sp/>rendered.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Possibly<sp/>some<sp/>user-defined<sp/>type<sp/>that<sp/>represents<sp/>a<sp/>node<sp/>in<sp/>a<sp/>tree<sp/>structure.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/>maxwidth:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>width<sp/>of<sp/>the<sp/>resulting<sp/>box<sp/>in<sp/>characters.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/>create_atom:<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>functor<sp/>of<sp/>type<sp/>std::string(const<sp/>ParamType&amp;).</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>renders<sp/>the<sp/>given<sp/>element<sp/>into<sp/>an<sp/>1D<sp/>string.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>the<sp/>string<sp/>must<sp/>not<sp/>contain<sp/>multibyte<sp/>characters,</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>size()<sp/>will<sp/>be<sp/>used<sp/>to<sp/>determine<sp/>its<sp/>width<sp/>in<sp/>columns.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/>count_children:<sp/><sp/><sp/>A<sp/>functor<sp/>of<sp/>type<sp/>std::pair&lt;ForwardIterator,ForwardIterator&gt;(const<sp/>ParamType&amp;).</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>returns<sp/>a<sp/>pair<sp/>of<sp/>iterators<sp/>representing<sp/>the<sp/>range<sp/>of<sp/>children</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>the<sp/>given<sp/>element.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_tree_graph<sp/>will<sp/>call<sp/>itself<sp/>recursively<sp/>for<sp/>each<sp/>element<sp/>in<sp/>this<sp/>range.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/>oneliner_test:<sp/><sp/><sp/><sp/>A<sp/>functor<sp/>of<sp/>type<sp/>bool(const<sp/>ParamType&amp;).</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>result<sp/>is<sp/>true,<sp/>enables<sp/>simplified<sp/>horizontal<sp/>topology.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/>simple_test:<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>functor<sp/>of<sp/>type<sp/>bool(const<sp/>ParamType&amp;).</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>result<sp/>is<sp/>true,<sp/>enables<sp/>very<sp/>simplified<sp/>horizontal<sp/>topology.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/>separate1st_test:<sp/>A<sp/>functor<sp/>of<sp/>type<sp/>bool(const<sp/>ParamType&amp;).</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>result<sp/>is<sp/>true,<sp/>create_tree_graph()<sp/>will<sp/>always<sp/>render</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>first<sp/>child<sp/>alone<sp/>on<sp/>a<sp/>separate<sp/>line,<sp/>but<sp/>the<sp/>rest<sp/>of<sp/>them</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>get<sp/>rendered<sp/>horizontally.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>Topology<sp/>types:</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertical:</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>├─child1</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>├─child2</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>└─child3</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Horizontal:</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>└─┬─────────┬─────────┐</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child1<sp/><sp/><sp/><sp/>child2<sp/><sp/><sp/><sp/>child3</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Simplified<sp/>horizontal:</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element──┬───────┬───────┐</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child1<sp/><sp/>child2<sp/><sp/>child3</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Very<sp/>simplified<sp/>horizontal:</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element──child1</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>The<sp/>vertical<sp/>and<sp/>horizontal<sp/>topologies<sp/>are<sp/>automatically<sp/>chosen</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>depending<sp/>on<sp/>the<sp/>situation<sp/>compared<sp/>to<sp/>the<sp/>maxwidth<sp/>parameter,</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>and<sp/>according<sp/>to<sp/>the<sp/>constraint<sp/>given<sp/>by<sp/>separate1st_test().</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>Simplified<sp/>topology<sp/>will<sp/>be<sp/>used<sp/>if<sp/>oneliner_test()<sp/>returns<sp/>true,</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separate1st_test()<sp/>returns<sp/>false,</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>children<sp/>fit<sp/>on<sp/>one<sp/>line,</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>very<sp/>simplified<sp/>topology<sp/>is<sp/>not<sp/>used.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>Very<sp/>simplified<sp/>topology<sp/>will<sp/>be<sp/>used<sp/>if<sp/>oneliner_test()<sp/>returns<sp/>true,</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separate1st_test()<sp/>returns<sp/>false,</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simple_test()<sp/>returns<sp/>true,</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>only<sp/>1<sp/>child,</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>it<sp/>fits<sp/>on<sp/>one<sp/>line.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParamType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AtomCreator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParamCountFunc,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OneLinerFunc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SimpleTestFunc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Separate1stParamTestFunc&gt;</highlight></codeline>
<codeline lineno="280" refid="d2/d2b/textbox_8hh_1a17140cb0db78ffa3673569ca11baf697" refkind="member"><highlight class="normal"><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref><sp/><ref refid="d2/d2b/textbox_8hh_1a17140cb0db78ffa3673569ca11baf697" kindref="member">create_tree_graph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType&amp;<sp/>e,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>maxwidth,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>AtomCreator&amp;&amp;<sp/><sp/><sp/><sp/>create_atom,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ParamCountFunc&amp;&amp;<sp/>count_children,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>OneLinerFunc&amp;&amp;<sp/><sp/><sp/>oneliner_test,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleTestFunc&amp;&amp;<sp/>simple_test,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>Separate1stParamTestFunc&amp;&amp;<sp/>separate1st_test)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref><sp/>result;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>atom<sp/>=<sp/>create_atom(e);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a58662b70d515ef93a41da09862a16d09" kindref="member">putline</ref>(atom,<sp/>0,0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param_range<sp/>=<sp/>count_children(e);<sp/>param_range.first<sp/>!=<sp/>param_range.second)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;textbox&gt;<sp/>boxes;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxes.reserve(std::distance(param_range.first,<sp/>param_range.second));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>param_range.first;<sp/>i<sp/>!=<sp/>param_range.second;<sp/>++i)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxes.emplace_back(<ref refid="d2/d2b/textbox_8hh_1a17140cb0db78ffa3673569ca11baf697" kindref="member">create_tree_graph</ref>(*i,<sp/>(maxwidth<sp/>&gt;=<sp/>(16+2))<sp/>?<sp/>maxwidth<sp/>-<sp/>2<sp/>:<sp/>16,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_atom,<sp/>count_children,<sp/>oneliner_test,<sp/>simple_test,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separate1st_test));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>std::size_t<sp/>margin<sp/>=<sp/>4,<sp/>firstx<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>sum_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b:<sp/>boxes)<sp/>sum_width<sp/>+=<sp/>b.width()+margin;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oneliner<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oneliner_test(e)<sp/>&amp;&amp;<sp/>!separate1st_test(e))</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>totalwidth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>boxes.begin();<sp/>;<sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cur<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++i<sp/>==<sp/>boxes.end())<sp/>{<sp/>totalwidth<sp/>+=<sp/>cur.width();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>auto&amp;<sp/>next<sp/>=<sp/>*i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalwidth<sp/>+=<sp/>cur.width()</highlight><highlight class="comment">/*cur.horiz_append_position(0,<sp/>next)*/</highlight><highlight class="normal"><sp/>+<sp/>margin;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneliner<sp/>=<sp/>(atom.size()<sp/>+<sp/>margin<sp/>+<sp/>totalwidth)<sp/>&lt;<sp/>maxwidth;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple<sp/>=<sp/>oneliner<sp/>&amp;&amp;<sp/>boxes.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>simple_test(e);<sp/></highlight><highlight class="comment">//<sp/>ret,<sp/>addrof,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>y<sp/>=<sp/>simple<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>boxes.begin();<sp/>i<sp/>!=<sp/>boxes.end();<sp/>++i)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>++std::vector&lt;textbox&gt;::iterator(i);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref>&amp;<sp/>cur<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>cur.<ref refid="d0/daa/structtextbox_1a096b5ece8c8cf83358e8052b314cc636" kindref="member">width</ref>();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>usemargin<sp/>=<sp/>(simple<sp/>||<sp/>oneliner)<sp/>?<sp/>(margin/2)<sp/>:<sp/>margin;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>x<sp/>=<sp/>result.<ref refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" kindref="member">horiz_append_position</ref>(y,<sp/>cur)<sp/>+<sp/>usemargin;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x==usemargin)<sp/>x<sp/>=<sp/>oneliner<sp/>?<sp/>atom.size()+usemargin<sp/>:<sp/>firstx;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!oneliner<sp/>&amp;&amp;<sp/>(x<sp/>+<sp/>width<sp/>&gt;<sp/>maxwidth<sp/>||<sp/>(separate1st_test(e)<sp/>&amp;&amp;<sp/>i<sp/>==<sp/>++boxes.begin())))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>new<sp/>line<sp/>if<sp/>this<sp/>item<sp/>won&apos;t<sp/>fit<sp/>in<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>firstx;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simple<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneliner<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>beginning<sp/>of<sp/>line,<sp/>judge<sp/>whether<sp/>to<sp/>add<sp/>room<sp/>for<sp/>horizontal<sp/>placement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal<sp/>=<sp/>x<sp/>&gt;<sp/>firstx;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!oneliner<sp/>&amp;&amp;<sp/>!horizontal<sp/>&amp;&amp;<sp/>next<sp/>!=<sp/>boxes.end()<sp/>&amp;&amp;<sp/>!(separate1st_test(e)<sp/>&amp;&amp;<sp/>i<sp/>==<sp/>boxes.begin()))</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>nextwidth<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>next-&gt;width();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>combined_width<sp/>=<sp/>cur.<ref refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" kindref="member">horiz_append_position</ref>(0,<sp/>*next)<sp/>+<sp/>margin<sp/>+<sp/>nextwidth;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combined_width<sp/>&lt;=<sp/>maxwidth)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enact<sp/>horizontal<sp/>placement<sp/>by<sp/>giving<sp/>1<sp/>row<sp/>of<sp/>room<sp/>for<sp/>the<sp/>connector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>horizontal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref><sp/>combined<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined.<ref refid="d0/daa/structtextbox_1a8c5aa4a6ca8372eb4d0116d21abdb021" kindref="member">putbox</ref>(cur.<ref refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" kindref="member">horiz_append_position</ref>(0,<sp/>*next)<sp/>+<sp/>margin,<sp/>0,<sp/>*next);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>std::max(result.<ref refid="d0/daa/structtextbox_1aea52598f2069f9f726869c7d9bf30eac" kindref="member">vert_append_position</ref>(x,<sp/>combined),<sp/>std::size_t(1));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!oneliner)<sp/>++y;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!horizontal)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>std::max(result.<ref refid="d0/daa/structtextbox_1aea52598f2069f9f726869c7d9bf30eac" kindref="member">vert_append_position</ref>(x,<sp/>cur),<sp/>std::size_t(1));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(horizontal<sp/>&amp;&amp;<sp/>!simple<sp/>&amp;&amp;<sp/>!oneliner)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>room<sp/>for<sp/>a<sp/>horizontal<sp/>connector.<sp/>If<sp/>not,<sp/>increase<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/daa/structtextbox" kindref="compound">textbox</ref><sp/>conn;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn.<ref refid="d0/daa/structtextbox_1a58662b70d515ef93a41da09862a16d09" kindref="member">putline</ref>(std::string(1+(x-0),<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result.<ref refid="d0/daa/structtextbox_1a4d83934a468b7b64e4675845d09500e1" kindref="member">horiz_append_position</ref>(y-1,<sp/>conn)<sp/>&gt;<sp/>x)<sp/>++y;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>std::max(result.<ref refid="d0/daa/structtextbox_1aea52598f2069f9f726869c7d9bf30eac" kindref="member">vert_append_position</ref>(x,<sp/>cur),<sp/>y);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(simple)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/>atom.size())</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" kindref="member">hline</ref>(atom.size(),<sp/>0,<sp/>1+x-atom.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oneliner)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cx<sp/>=<sp/>x,<sp/>cy<sp/>=<sp/>y-1;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/>atom.size())</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" kindref="member">hline</ref>(atom.size(),<sp/>0,<sp/>1+x-atom.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" kindref="member">vline</ref>(cx,<sp/>cy,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(horizontal)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cx<sp/>=<sp/>x,<sp/>cy<sp/>=<sp/>y-1;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" kindref="member">vline</ref>(0,<sp/><sp/>1,<sp/><sp/>1<sp/>+<sp/>(cy-1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" kindref="member">hline</ref>(0,<sp/><sp/>cy,<sp/>1<sp/>+<sp/>(cx-0),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" kindref="member">vline</ref>(cx,<sp/>cy,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cx<sp/>=<sp/>x-1,<sp/>cy<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a2cd2c45feff1eb6529730e56055fbd9f" kindref="member">vline</ref>(0,1,<sp/><sp/>1<sp/>+<sp/>(cy-1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a6ae292c34d3d208bbb5af15320c537d5" kindref="member">hline</ref>(0,cy,<sp/>1<sp/>+<sp/>(cx-0),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a8c5aa4a6ca8372eb4d0116d21abdb021" kindref="member">putbox</ref>(x,<sp/>y,<sp/>cur);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="d0/daa/structtextbox_1a94889342cfd37bf11d85dc3f6d606079" kindref="member">trim</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/boki/KIVI/extern/textbox/textbox.hh"/>
  </compounddef>
</doxygen>
