<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/da4/classCatch_1_1Detail_1_1Approx" kind="class" language="C++" prot="public">
    <compoundname>Catch::Detail::Approx</compoundname>
    <includes refid="df/dbf/catch2_8hpp" local="no">catch2.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d2/da4/classCatch_1_1Detail_1_1Approx_1af17c8e869ae7a55d14b99eb18e178114" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_epsilon</definition>
        <argsstring></argsstring>
        <name>m_epsilon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3170" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a4262a7e821eec507b424c335121ea0d8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_margin</definition>
        <argsstring></argsstring>
        <name>m_margin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3171" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a65e9bdab9113ff3300b45f0a4e048dd7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_scale</definition>
        <argsstring></argsstring>
        <name>m_scale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3172" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/da4/classCatch_1_1Detail_1_1Approx_1af7aeef703bd591f5ec85407b1dac053c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Catch::Detail::Approx::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3173" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1af53c48227a7b654da58adeb1d360b715" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Catch::Detail::Approx::equalityComparisonImpl</definition>
        <argsstring>(double other) const</argsstring>
        <name>equalityComparisonImpl</name>
        <param>
          <type>double</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3078" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1aff04b8b32edc707138eb395ed45ec576" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Catch::Detail::Approx::setMargin</definition>
        <argsstring>(double margin)</argsstring>
        <name>setMargin</name>
        <param>
          <type>double</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3081" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a28fd65e069b698bc7ae8f060bfbcd6b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Catch::Detail::Approx::setEpsilon</definition>
        <argsstring>(double epsilon)</argsstring>
        <name>setEpsilon</name>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3084" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a1a8618ea8db08c66bd3d9fe8f74b957a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Catch::Detail::Approx::Approx</definition>
        <argsstring>(double value)</argsstring>
        <name>Approx</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3087" column="18"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1aa9adf5f05e641df770039543d5067d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref></type>
        <definition>Approx Catch::Detail::Approx::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3091" column="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1ad8b2757f4804f9a1d3fa674efb98c20e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref></type>
        <definition>Approx Catch::Detail::Approx::operator()</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>operator()</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3094" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3094" bodyend="3100"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1ab14b979fa8a37f21d037157fabed4072" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Catch::Detail::Approx::Approx</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>Approx</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3103" column="18" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3103" bodyend="3104"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1acd26adba86a066b9f40dad467f23bc85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx&amp; Catch::Detail::Approx::epsilon</definition>
        <argsstring>(T const &amp;newEpsilon)</argsstring>
        <name>epsilon</name>
        <param>
          <type>T const &amp;</type>
          <declname>newEpsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3148" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3148" bodyend="3152"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a6467dc18791e1a1f4c15c4fb63cf5051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx&amp; Catch::Detail::Approx::margin</definition>
        <argsstring>(T const &amp;newMargin)</argsstring>
        <name>margin</name>
        <param>
          <type>T const &amp;</type>
          <declname>newMargin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3155" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3155" bodyend="3159"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a8f4d2def2920a3840d3271f6d9c5ede2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> &amp;</type>
        <definition>Approx&amp; Catch::Detail::Approx::scale</definition>
        <argsstring>(T const &amp;newScale)</argsstring>
        <name>scale</name>
        <param>
          <type>T const &amp;</type>
          <declname>newScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3162" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3162" bodyend="3165"/>
      </memberdef>
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a972fd9ac60607483263f1b0f0f9955e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Catch::Detail::Approx::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3167" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d2/da4/classCatch_1_1Detail_1_1Approx_1aaf86dc0ee92272ac2d9839197a07951d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref></type>
        <definition>static Approx Catch::Detail::Approx::custom</definition>
        <argsstring>()</argsstring>
        <name>custom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3089" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1ab38782a37d09b527ca5e126dbf433dda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const T &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3107" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3107" bodyend="3110"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a0e5ef1957d4c38d7857005909c613743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(Approx const &amp;lhs, const T &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3113" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3113" bodyend="3115"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a29696f14ebd51887c8c88e771d12ef54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3118" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3118" bodyend="3120"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a31d62e3c35abb86cf25e02601966ca5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3123" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3123" bodyend="3125"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a0369de03e81bc2ceaf6c9d830476bd49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3128" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3128" bodyend="3130"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a6040b908588745570847d7ae8483b091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3133" column="16" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3133" bodyend="3135"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1affd27efc62be386daeecb7a09e828d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(T const &amp;lhs, Approx const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3138" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3138" bodyend="3140"/>
      </memberdef>
      <memberdef kind="friend" id="d2/da4/classCatch_1_1Detail_1_1Approx_1a5899b8a36725406701e2ebded2971ee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(Approx const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="d2/da4/classCatch_1_1Detail_1_1Approx" kindref="compound">Approx</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3143" column="21" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3143" bodyend="3145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" line="3076" column="5" bodyfile="/home/boki/.tmp/kivi/extern/catch2/catch2.hpp" bodystart="3076" bodyend="3174"/>
    <listofallmembers>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a1a8618ea8db08c66bd3d9fe8f74b957a" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>Approx</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1ab14b979fa8a37f21d037157fabed4072" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>Approx</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1aaf86dc0ee92272ac2d9839197a07951d" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>custom</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1acd26adba86a066b9f40dad467f23bc85" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>epsilon</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1af53c48227a7b654da58adeb1d360b715" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>equalityComparisonImpl</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1af17c8e869ae7a55d14b99eb18e178114" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_epsilon</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a4262a7e821eec507b424c335121ea0d8" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_margin</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a65e9bdab9113ff3300b45f0a4e048dd7" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_scale</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1af7aeef703bd591f5ec85407b1dac053c" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>m_value</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a6467dc18791e1a1f4c15c4fb63cf5051" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>margin</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a29696f14ebd51887c8c88e771d12ef54" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator!=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a31d62e3c35abb86cf25e02601966ca5d" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator!=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1ad8b2757f4804f9a1d3fa674efb98c20e" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator()</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1aa9adf5f05e641df770039543d5067d30" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator-</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a0369de03e81bc2ceaf6c9d830476bd49" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&lt;=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a6040b908588745570847d7ae8483b091" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&lt;=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1ab38782a37d09b527ca5e126dbf433dda" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator==</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a0e5ef1957d4c38d7857005909c613743" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator==</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1affd27efc62be386daeecb7a09e828d44" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&gt;=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a5899b8a36725406701e2ebded2971ee6" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>operator&gt;=</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a8f4d2def2920a3840d3271f6d9c5ede2" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>scale</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a28fd65e069b698bc7ae8f060bfbcd6b6" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>setEpsilon</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1aff04b8b32edc707138eb395ed45ec576" prot="private" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>setMargin</name></member>
      <member refid="d2/da4/classCatch_1_1Detail_1_1Approx_1a972fd9ac60607483263f1b0f0f9955e6" prot="public" virt="non-virtual"><scope>Catch::Detail::Approx</scope><name>toString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
